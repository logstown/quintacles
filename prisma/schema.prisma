// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id             String             @id @unique
  username       String             @unique
  displayName    String?
  photoURL       String?
  coverImagePath String             @default("/movieBackdrop.jpeg")
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @default(now())
  userLists      UsersOnUserLists[]

  @@unique([id, username])
}

enum MediaType {
  Movie
  TvShow
  TvEpisode
  Person
}

model UserList {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  lastUserAddedAt DateTime @default(now())

  users UsersOnUserLists[]

  mediaType MediaType

  item1            ListItem     @relation("item1", fields: [mediaType, item1Id], references: [mediaType, tmdbId])
  item1Id          Int
  item2            ListItem     @relation("item2", fields: [mediaType, item2Id], references: [mediaType, tmdbId])
  item2Id          Int
  item3            ListItem     @relation("item3", fields: [mediaType, item3Id], references: [mediaType, tmdbId])
  item3Id          Int
  item4            ListItem     @relation("item4", fields: [mediaType, item4Id], references: [mediaType, tmdbId])
  item4Id          Int
  item5            ListItem     @relation("item5", fields: [mediaType, item5Id], references: [mediaType, tmdbId])
  item5Id          Int
  Restrictions     Restrictions @relation(fields: [restrictionsSlug], references: [slug])
  restrictionsSlug String

  @@unique([id, restrictionsSlug])
  @@unique(name: "uniqueList", [item1Id, item2Id, item3Id, item4Id, item5Id, restrictionsSlug])
}

model UsersOnUserLists {
  userId           String
  userListId       Int
  restrictionsSlug String
  username         String

  User     User     @relation(fields: [userId, username], references: [id, username])
  UserList UserList @relation(fields: [userListId, restrictionsSlug], references: [id, restrictionsSlug])

  userAddedAt DateTime @default(now())

  @@id([userId, userListId])
  @@unique(name: "userRestrictionsById", [userId, restrictionsSlug])
  @@unique(name: "userRestrictionsByUsername", [username, restrictionsSlug])
}

model Restrictions {
  slug             String    @id
  mediaType        MediaType
  genreId          Int
  decade           Int
  isLiveActionOnly Boolean

  Person   Person @relation(fields: [personId], references: [id])
  personId Int

  EpisodesTvShow   TvShowLite @relation(fields: [episodesTvShowId], references: [id])
  episodesTvShowId Int

  userLists UserList[]
}

model ListItem {
  mediaType    MediaType
  tmdbId       Int
  name         String
  date         String
  posterPath   String?
  genreIds     Int[]
  overview     String?
  backdropPath String?
  seasonNum    Int?
  episodeNum   Int?

  item1 UserList[] @relation("item1")
  item2 UserList[] @relation("item2")
  item3 UserList[] @relation("item3")
  item4 UserList[] @relation("item4")
  item5 UserList[] @relation("item5")

  @@id(name: "uniqueListItem", fields: [mediaType, tmdbId])
}

model Person {
  id          Int     @id @unique
  name        String
  profilePath String?

  restrictions Restrictions[]
}

model TvShowLite {
  id           Int     @id @unique
  name         String
  backdropPath String?
  posterPath   String?

  retrictions Restrictions[]
}
